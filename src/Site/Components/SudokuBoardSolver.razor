<div class="puzzle-area">
    <div class="text-center">
        <span>easiest step</span>
        <label class="switch">
            <input type="checkbox" @onchange="ToggleTechniqueSelection">
            <span class="slider round"></span>
        </label>
        <span>technique selection</span>
    </div>

    <div class="switch-button">
        <input class="switch-button-checkbox" type="checkbox" @onchange="ToggleTechniqueSelection"/>
        <label class="switch-button-label" for="">
            <span class="switch-button-label-span">easiest step</span>
        </label>
    </div>

	<div class="toggle">
		<input type="radio" name="sizeBy" value="weight" id="sizeWeight" checked="checked" />
		<label for="sizeWeight">Easiest step only</label>
		<input type="radio" name="sizeBy" value="dimensions" id="sizeDimensions" />
		<label for="sizeDimensions">Technique selection</label>
	</div>

    @if (showTechniqueSelection)
    {
        <div>
            @foreach (var technique in this.techniqueCollection.Techniques) {
                <SudokuTechniqueCollection Technique="@(technique)" OnShowHintCallback="OnShowHint" OnShowChangeCallback="OnShowChange" />
            }
        </div>
    }

    <SudokuBoard Board="@(Board)" Change="@(shownChange)"/>

    <div class="btn-toolbar justify-content-between solver-btn-area">
        <button class="btn btn-outline-secondary sudoku-btn" disabled="@(boardStates.Count <= 1)" @onclick="BackClick">Back</button>
        <button class="btn btn-outline-secondary sudoku-btn" disabled="@(NoMoreHints)" @onclick="NextHintClick">Hint</button>
        <button class="btn btn-outline-secondary sudoku-btn" disabled="@(!changeDescription.Change.HasEffect)" @onclick="NextStepClick">Next step</button>
    </div>

    <div>
        <ul hidden="@(!hintDescriptions.Any())">
            @foreach (var hintDescription in hintDescriptions)
            {
                <li>@hintDescription</li>
            }
        </ul>

        @if (!boardIsValid) {
            <p>Oh no! The Sudoku puzzle got into an invalid state :(</p>
        } else if (changeDescription.Change.HasEffect) {
            @* <p>@(change.FoundBy.DifficultyLevel) step: @(change.FoundBy.Description)</p> *@
        } else {
            if (Board.IsComplete) {
                <p>Sudoku solved!</p>
            } else if (showTechniqueSelection && techniqueCollection.FoundChange == null) {
                <p>Running all solving techniques...</p>
            } else if (showTechniqueSelection && techniqueCollection.FoundChange.Change.HasEffect) {
                <p>Select a technique to apply.</p>
            } else {
                <p>Couldn't find any more steps for solving the Sudoku :(</p>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public BoardState Board { get; set; }

    private bool showTechniqueSelection;

    private List<BoardState> boardStates;
    private ISolver solver;
    private ISudokuRules rules;
    private IChangeDescription changeDescription = NoChangeDescription.Instance;
    private IBoardStateChange shownChange;
    private List<ChangeHint> hints;
    private int currentHint;
    private bool NoMoreHints => currentHint > hints.Count || !changeDescription.Change.HasEffect;
    private List<string> hintDescriptions = new List<string>();

    private TechniqueCollection techniqueCollection;

    private bool boardIsValid;

    protected override async Task OnInitializedAsync()
    {
        this.boardStates = new List<BoardState> { Board };
        this.rules = new StandardSudokuRules();

        this.solver = SolverFactory.DefaultSolver();
        this.techniqueCollection = SolverFactory.TechniqueList();

        this.boardIsValid = this.rules.BoardIsValid(Board);

        ComputeInitialBoardChanges();
        SetChangeDescription(NoChangeDescription.Instance);
        await ComputeNextStep();
    }

    private void ComputeInitialBoardChanges()
    {
        if (Board.IsComplete || !this.boardIsValid)
        {
            return;
        }

        var solver = new Solver().With(Technique.EliminationByValue.AllDirections()).GlobChanges();
        var changeDescription = solver.GetNextChange(Board);
        if (changeDescription.Change.HasEffect)
        {
            Board = Board.ApplyChange(changeDescription.Change);
        }
    }

    private async Task ComputeNextStep()
    {
        if (Board.IsComplete || !this.boardIsValid)
        {
            return;
        }

        if (this.showTechniqueSelection)
        {
            await ComputeNextStepForTechniques();
        }
        else
        {
            var change = this.solver.GetNextChange(Board);
            OnShowHint(change);
        }
    }

    private async Task<IChangeDescription> ComputeNextStepForTechniques()
    {
        this.techniqueCollection.ClearSolverChanges();
        IChangeDescription change = null;
        while (change == null)
        {
            change = await this.techniqueCollection.FindNextChangeFor(Board);
        }
        return change;
    }

    private async Task NextStepClick()
    {
        this.boardIsValid = this.rules.BoardChangeIsValid(Board, this.changeDescription.Change);
        var newBoard = Board.ApplyChange(this.changeDescription.Change);
        Board = newBoard;
        this.boardStates.Add(Board);

        SetChangeDescription(NoChangeDescription.Instance);
        await ComputeNextStep();
    }

    private async Task BackClick()
    {
        if (this.boardStates.Count > 1)
        {
            this.boardStates.RemoveAt(this.boardStates.Count - 1);
            Board = this.boardStates[this.boardStates.Count - 1];
            this.boardIsValid = true;

            SetChangeDescription(NoChangeDescription.Instance);
            await ComputeNextStep();
        }
    }

    private void NextHintClick() => ShowNextHint();

    private bool ShowNextHint()
    {
        if (this.currentHint < this.hints.Count)
        {
            var hint = this.hints[currentHint++];
            this.shownChange = hint.Change;
            this.hintDescriptions.Add(hint.Description);
            return true;
        }
        else if (this.currentHint == this.hints.Count)
        {
            this.currentHint++;
            this.shownChange = this.changeDescription.Change;
            this.hintDescriptions.Add($"{this.changeDescription.FoundBy.DifficultyLevel} step: {this.changeDescription.FoundBy.Description}");
            return true;
        }

        return false;
    }

    private void ShowAllHints()
    {
        while (ShowNextHint()) { }
    }

    private void ClearHints()
    {
        this.shownChange = this.changeDescription.Change;
        this.hints = this.changeDescription.ChangeHinter.GetHints().ToList();
        this.currentHint = 0;
        this.hintDescriptions.Clear();
    }

    private void SetChangeDescription(IChangeDescription changeDescription)
    {
        this.changeDescription = changeDescription;
        ClearHints();
    }

    private void OnShowHint(IChangeDescription change)
    {
        Console.WriteLine("Show Hint");
        SetChangeDescription(change);
        if (this.changeDescription.Change.HasEffect)
        {
            ShowNextHint();
        }
    }

    private void OnShowChange(IChangeDescription change)
    {
        Console.WriteLine("Show Change");
        SetChangeDescription(change);
        if (this.changeDescription.Change.HasEffect)
        {
            ShowAllHints();
        }
    }

    private async Task ToggleTechniqueSelection(ChangeEventArgs e)
    {
        Console.WriteLine("toggled: " + e.Value);
        this.showTechniqueSelection = (bool)e.Value;
        await ComputeNextStep();
    }
}