<div class="puzzle-area">
    <SudokuBoard Board="@(Board)" Change="@(shownChange)"/>

    <div class="btn-toolbar justify-content-between solver-btn-area">
        <button class="btn btn-outline-secondary sudoku-btn" disabled="@(boardStates.Count <= 1)" @onclick="GoBackOneStep">Back</button>
        <button class="btn btn-outline-secondary sudoku-btn" disabled="@(NoMoreHints)" @onclick="ShowNextHint">Hint</button>
        <button class="btn btn-outline-secondary sudoku-btn" disabled="@(!changeDescription.Change.HasEffect)" @onclick="SolveNextStep">Next step</button>
    </div>

    <ul hidden="@(!hintDescriptions.Any())">
        @foreach (var hintDescription in hintDescriptions)
        {
            <li>@hintDescription</li>
        }
    </ul>

    @if (!boardIsValid) {
        <p>Oh no! The Sudoku puzzle got into an invalid state :(</p>
    } else if (changeDescription.Change.HasEffect) {
        @* <p>@(change.FoundBy.DifficultyLevel) step: @(change.FoundBy.Description)</p> *@
    } else {
        if (Board.IsComplete) {
            <p>Sudoku solved!</p>
        } else {
            <p>Couldn't find any more steps for solving the Sudoku :(</p>
        }
    }
</div>

@code {
    [Parameter]
    public BoardState Board { get; set; }

    private List<BoardState> boardStates;
    private ISolver solver;
    private ISudokuRules rules;
    private IChangeDescription changeDescription = NoChangeDescription.Instance;
    private IBoardStateChange shownChange;
    private List<ChangeHint> hints;
    private int currentHint;
    private bool NoMoreHints => currentHint > hints.Count || !changeDescription.Change.HasEffect;
    private List<string> hintDescriptions = new List<string>();

    private bool boardIsValid;

    protected override void OnInitialized()
    {
        this.boardStates = new List<BoardState> { Board };
        this.rules = new StandardSudokuRules();
        this.solver = new ChainedSolver()
            .WithSolver(new Solver().With(Technique.Subsets.NakedSingle()).GlobChanges())
            .WithSolver(new Solver().With(Technique.EliminationByValue.AllDirections()).GlobChanges())
            .WithSolver(new Solver().With(Technique.Subsets.HiddenSingleRow()).GlobChanges())
            .WithSolver(new Solver().With(Technique.Subsets.HiddenSingleColumn()).GlobChanges())
            .WithSolver(new Solver().With(Technique.Subsets.HiddenSingleBox()).GlobChanges())
            .WithSolver(new Solver()
                .With(Technique.LockedCandidates.LockedCandidatesPointing.AllDirections())
                .With(Technique.LockedCandidates.LockedCandidateClaiming.AllDirections())
                .With(Technique.Subsets.NakedPairs())
                .With(Technique.Subsets.HiddenPairs())
                .With(Technique.Subsets.NakedTriples())
                .With(Technique.Subsets.HiddenTriples())
                .With(Technique.Subsets.NakedQuads())
                .With(Technique.Subsets.HiddenQuads())
                .With(Technique.Fish.XWing())
                .With(Technique.Wings.XyWing())
                .With(Technique.Fish.Swordfish())
                .With(Technique.Fish.Jellyfish())
                .With(Technique.Wings.XyzWing())
                .With(Technique.Wings.WxyzWing()));

        this.boardIsValid = this.rules.BoardIsValid(Board);
        ComputeChangeAndHints();
    }

    private void ComputeChangeAndHints()
    {
        this.changeDescription = ComputeNextStep();
        this.shownChange = BoardStateNoChange.Instance;
        this.hints = this.changeDescription.ChangeHinter.GetHints().ToList();
        this.currentHint = 0;
        this.hintDescriptions.Clear();
        if (changeDescription.Change.HasEffect)
        {
            ShowNextHint();
        }
    }

    private void SolveNextStep()
    {
        this.boardIsValid = this.rules.BoardChangeIsValid(Board, this.changeDescription.Change);
        var newBoard = Board.ApplyChange(this.changeDescription.Change);
        Board = newBoard;
        this.boardStates.Add(Board);
        ComputeChangeAndHints();
    }

    private IChangeDescription ComputeNextStep() =>
        (Board.IsComplete || !this.boardIsValid)
            ? NoChangeDescription.Instance
            : solver.GetNextChange(Board);

    private void GoBackOneStep()
    {
        if (this.boardStates.Count > 1)
        {
            this.boardStates.RemoveAt(this.boardStates.Count - 1);
            Board = this.boardStates[this.boardStates.Count - 1];
            this.boardIsValid = true;
            ComputeChangeAndHints();
        }
    }

    private void ShowNextHint()
    {
        if (this.currentHint < this.hints.Count)
        {
            var hint = this.hints[currentHint++];
            this.shownChange = hint.Change;
            this.hintDescriptions.Add(hint.Description);
        }
        else if (this.currentHint == this.hints.Count)
        {
            this.currentHint++;
            this.shownChange = this.changeDescription.Change;
            this.hintDescriptions.Add($"{this.changeDescription.FoundBy.DifficultyLevel} step: {this.changeDescription.FoundBy.Description}");
        }
    }
}